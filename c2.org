* 2.1

 #+BEGIN_SRC mips
           addi        $s0, $s2, -5
           add         $s0, $s0, $s1
 #+END_SRC

* 2.2

#+BEGIN_SRC C
  f = g + h; 
  f += i;
#+END_SRC

* 2.3

#+BEGIN_SRC mips
        sub         $t0, $s3, $s4
        sll         $t0, $t0, 2
        add         $t0, $t0, $s6
        lw          $t0, 0($t0)
        sw          $t0, 32($s7)
#+END_SRC

* 2.4

#+BEGIN_SRC c
B[g] = A[f] + A[f+1]
#+END_SRC

* 2.5

#+BEGIN_SRC mips
          lw          $s0, 0($t0)
          lw          $t0, 4($t0)
          add         $t0, $t0, $s0
          sw          $t0, 0($t1)
#+END_SRC

* 2.6

#+BEGIN_SRC c
  int temp1 = Array[0];
  int temp2 = Array[1];
  Array[0] = Array[4];
  Array[1] = temp1;
  Array[4] = Array[3];
  Array[3] = temp2;
#+END_SRC

#+BEGIN_SRC mips
          lw          $s0, 0($s6)
          lw          $s1, 4($s6)
          lw          $s3, 12($s6)
          lw          $s4, 16($s6)
          sw          $s4, 0($s6)
          sw          $s0, 4($s6)
          sw          $s1, 12($s6)
          sw          $s3, 16($s6)
#+END_SRC

* 2.7

Big endian:

0: ab
1: cd
2: ef
3: 12

* 2.8

#+BEGIN_SRC lua :results output
  -- 0xabcdef12
  sum = 0
  n = {2, 1, 15, 14, 13, 12, 11, 10}
  for i, v in ipairs(n) do
     sum = sum + v * (1 << (i - 1 << 2))
  end
  print( sum )
#+END_SRC

2882400018

* 2.9

#+BEGIN_SRC mips
          sll         $s3, $s3, 2
          sll         $s4, $s4, 2
          add         $t0, $s6, $s3 
          lw          $t1, 0($t0)
          add         $t0, $s6, $s4
          lw          $t2, 0($t0)
          add         $t0, $t1, $t2
          sw          $t0, 32($s7)
#+END_SRC

* 2.10

#+BEGIN_SRC c
f = 2 * A
#+END_SRC

* 2.14

#+BEGIN_SRC mips
  add $s0, $s0, $s0 # R type
#+END_SRC

* 2.15

I Type 

|  6 |  5 | 5 | 16 |
|----+----+---+----|
| 43 | 10 | 9 | 32 |

1010.1101.0100.1001.0000.0000.0010.0000

0xad490020

* 2.16

R Type

#+BEGIN_SRC mips
sub v1, v0, v1
#+END_SRC

0x00621822

* 2.19

1. 0x12345678
2. 0xAAAAAAA0
3. 0x00005545

* 2.20

This considers the first bit as bit 1, not bit 0.

#+BEGIN_SRC mips
        andi        $t2, $t0, 0xfc00
        sll         $t2, $t2, 15
        li          $t3, 0x81ffffff
        and         $t1, $t1, $t3
        or          $t1, $t1, $t2
#+END_SRC

* 2.21

#+BEGIN_SRC mips
          nor         $t1, $t2, $0
#+END_SRC

* 2.22

#+BEGIN_SRC mips
        lw          $t1, 0($s1)
        sll         $t1, $t1, 4
#+END_SRC

* 2.27

#+BEGIN_SRC mips
        li          $t0, 0
extloop:
        slt         $t2, $t0, $s0
        beq         $t2, $zero, end
        li          $t1, 0
        addi        $t3, $s2, 0
intloop:
        slt         $t2, $t1, $s2
        beq         $t2, 0, intloopend
        add         $t4, $t0, $t1
        sw          $t4, 0($t3)
        addi        $t3, $t3, 4
        addi        $t1, $t1, 1
        j           intloop
intloopend:
        addi        $t0, $t0, 1
        j           extloop
end:
#+END_SRC

* 2.31

#+BEGIN_SRC mips
fib:
    addiu   $sp, $sp, -24
    sw      $ra, 20($sp)
    sw      $s0, 16($sp)
    li      $v0, 0
    beq     $a0, $zero, END
    li      $v0, 1
    beq     $a0, $v0, END
    sw      $a0, 24($sp)
    addiu   $a0, $a0, -1
    jal     fib
    move    $s0, $v0
    lw      $a0, 24($sp)
    addiu   $a0, $a0, -2
    jal     fib
    add     $v0, $v0, $s0
END:
    lw      $s0, 16($sp)
    lw      $ra, 20($sp)
    addiu   $sp, $sp, 24
    jr      $ra
#+END_SRC

* 2.34

#+BEGIN_SRC mips
f:
    addiu   $sp, $sp, -24
    sw      $ra, 16($sp)
    sw      $a2, 32($sp)
    sw      $a3, 36($sp)
    jal     func
    or      $a0, $zero, $v0
    lw      $a2, 32($sp)
    lw      $a3, 36($sp)
    addu    $a1, $a2, $a3
    jal     func
    lw      $ra, 16($sp)
    addiu   $sp, $sp, 24
    jr      $ra
#+END_SRC


